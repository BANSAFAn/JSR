name: Tauri Release

on:
  push:
    branches: [ main ]
    paths:
      - 'jsr-tauri-app/**'
      - '.github/workflows/tauri-release.yml'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.app-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get app version
        id: app-version
        run: |
          VERSION=$(cat ./jsr-tauri-app/src/src-tauri/tauri.conf.json | grep '"version"' | head -n 1 | awk -F '"' '{print $4}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "App version: $VERSION"

      - name: Get commit messages
        id: get-commits
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_LOG=$(git log --pretty=format:"%s" $(git rev-list --max-parents=0 HEAD)..HEAD)
          else
            COMMIT_LOG=$(git log --pretty=format:"%s" $PREVIOUS_TAG..HEAD)
          fi
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.app-version.outputs.version }}`,
              name: `JSR v${{ steps.app-version.outputs.version }}`,
              body: `## Что нового в этом релизе:\n${{ env.COMMIT_LOG }}`,
              draft: false,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: './jsr-tauri-app/src/package-lock.json'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./jsr-tauri-app/src

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.jsr_token }}
        with:
          projectPath: './jsr-tauri-app/src'
          releaseId: ${{ needs.create-release.outputs.release_id }}

      - name: Upload Windows artifacts manually if needed
        if: matrix.platform == 'windows-latest' && failure()
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ needs.create-release.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { globby } = await import('globby');
            
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            
            const exeFiles = await globby([
              './jsr-tauri-app/src/src-tauri/target/release/bundle/nsis/*.exe',
              './jsr-tauri-app/src/src-tauri/target/release/bundle/msi/*.msi'
            ]);
            
            for (const file of exeFiles) {
              const fileName = path.basename(file);
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fileData
              });
            }

      - name: Upload macOS artifacts manually if needed
        if: matrix.platform == 'macos-latest' && failure()
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ needs.create-release.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { globby } = await import('globby');
            
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            
            const dmgFiles = await globby(['./jsr-tauri-app/src/src-tauri/target/release/bundle/dmg/*.dmg']);
            
            for (const file of dmgFiles) {
              const fileName = path.basename(file);
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fileData
              });
            }

      - name: Upload Linux artifacts manually if needed
        if: matrix.platform == 'ubuntu-latest' && failure()
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ needs.create-release.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { globby } = await import('globby');
            
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            
            const linuxFiles = await globby([
              './jsr-tauri-app/src/src-tauri/target/release/bundle/deb/*.deb',
              './jsr-tauri-app/src/src-tauri/target/release/bundle/appimage/*.AppImage'
            ]);
            
            for (const file of linuxFiles) {
              const fileName = path.basename(file);
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fileData
              });
            }