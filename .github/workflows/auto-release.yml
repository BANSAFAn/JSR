name: Automatic Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src/**'
      - 'styles/**'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.generate-release-info.outputs.tag }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate release tag and notes
        id: generate-release-info
        run: |
          # Generate random tag
          DATE=$(date +'%Y.%m.%d')
          RANDOM_NUM=$(( RANDOM % 1000 ))
          TAG="v${DATE}-${RANDOM_NUM}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
          # Create temporary release notes file
          echo "# JSR Release" > release-notes.md
          echo "" >> release-notes.md
          echo "## Improvements" >> release-notes.md
          echo "- Improved performance" >> release-notes.md
          echo "- Enhanced user interface" >> release-notes.md
          echo "- Updated translations" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Bug Fixes" >> release-notes.md
          echo "- Fixed various issues" >> release-notes.md
          echo "- Improved stability" >> release-notes.md

      - name: Create release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.generate-release-info.outputs.tag }} \
            --title "JSR Release ${{ steps.generate-release-info.outputs.tag }}" \
            --notes-file release-notes.md \
            --repo ${{ github.repository }}
          echo "upload_url=${{ github.server_url }}/${{ github.repository }}/releases/${{ steps.generate-release-info.outputs.tag }}/assets/upload" >> $GITHUB_OUTPUT

  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get version from package.json
        id: get-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:win

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:mac

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:linux

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} \
            ./dist/JSR-Setup-${{ steps.get-version.outputs.version }}.exe \
            --repo ${{ github.repository }}

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} \
            ./dist/JSR-${{ steps.get-version.outputs.version }}.dmg \
            --repo ${{ github.repository }}

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} \
            ./dist/JSR-${{ steps.get-version.outputs.version }}.AppImage \
            ./dist/jsr_${{ steps.get-version.outputs.version }}_amd64.deb \
            --repo ${{ github.repository }}