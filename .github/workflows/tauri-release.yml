# Workflow for building and releasing Tauri app
name: Tauri Release

# Trigger on pushes to main branch that modify Tauri app files or this workflow
on:
  push:
    branches: [ main ]
    paths:
      - 'JSR-Tauri/jsr-tauri-app/**'
      - '.github/workflows/tauri-release.yml'
  # Добавляем возможность ручного запуска
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Включить отладочный режим'
        required: false
        default: false
        type: boolean

# Required permissions for the workflow
permissions:
  contents: write    # Needed for creating releases and uploading assets
  pull-requests: write  # Needed for commenting on PRs
  issues: write      # Needed for issue management

jobs:
  # Job to create a GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.app-version.outputs.version }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Extract app version from tauri.conf.json
      - name: Get app version
        id: app-version
        run: |
          # Проверяем структуру директорий
          echo "Checking directory structure..."
          ls -la ./JSR-Tauri || echo "JSR-Tauri directory not found"
          ls -la ./JSR-Tauri/jsr-tauri-app || echo "jsr-tauri-app directory not found"
          ls -la ./JSR-Tauri/jsr-tauri-app/src || echo "src directory not found"
          ls -la ./JSR-Tauri/jsr-tauri-app/src/src-tauri || echo "src-tauri directory not found"
          
          # Ищем файл tauri.conf.json
          echo "Searching for tauri.conf.json..."
          TAURI_CONF_PATH="./JSR-Tauri/jsr-tauri-app/src/src-tauri/tauri.conf.json"
          
          if [ ! -f "$TAURI_CONF_PATH" ]; then
            echo "Error: tauri.conf.json not found at expected path: $TAURI_CONF_PATH"
            echo "Searching for tauri.conf.json in the project..."
            FOUND_PATHS=$(find ./JSR-Tauri -name "tauri.conf.json" -type f)
            
            if [ -z "$FOUND_PATHS" ]; then
              echo "No tauri.conf.json found in the project"
              exit 1
            else
              echo "Found tauri.conf.json at:"
              echo "$FOUND_PATHS"
              # Используем первый найденный файл
              TAURI_CONF_PATH=$(echo "$FOUND_PATHS" | head -n 1)
              echo "Using: $TAURI_CONF_PATH"
            fi
          fi
          
          # Извлекаем версию
          VERSION=$(cat "$TAURI_CONF_PATH" | grep '"version"' | head -n 1 | awk -F '"' '{print $4}')
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from $TAURI_CONF_PATH"
            cat "$TAURI_CONF_PATH"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "App version: $VERSION"

      # Get commit messages since last tag for release notes
      - name: Get commit messages for release notes
        id: get-commits
        run: |
          # Find the previous tag or use the first commit if no tags exist
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate commit log from previous tag or from first commit
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMIT_LOG=$(git log --pretty=format:"%s" $(git rev-list --max-parents=0 HEAD)..HEAD)
          else
            echo "Found previous tag: $PREVIOUS_TAG"
            COMMIT_LOG=$(git log --pretty=format:"%s" $PREVIOUS_TAG..HEAD)
          fi
          
          # Save commit log to environment variable for use in release notes
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Print summary of commits found
          COMMIT_COUNT=$(echo "$COMMIT_LOG" | wc -l)
          echo "Found $COMMIT_COUNT commits for release notes"

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            /**
             * Increment patch version of semver string
             * @param {string} version - Semver version string (e.g. '1.0.0')
             * @returns {string} Incremented version
             */
            function incrementPatchVersion(version) {
              const versionParts = version.split('.');
              let patch = parseInt(versionParts[2] || '0');
              patch++;
              return `${versionParts[0]}.${versionParts[1]}.${patch}`;
            }

            async function createOrUpdateRelease() {
              let version = '${{ steps.app-version.outputs.version }}';
              let tagName = `v${version}`;
              let releaseName = `JSR ${tagName}`;
              const releaseBody = `## Что нового в этом релизе:\n${process.env.COMMIT_LOG || 'Changes not available'}`;

              for (let i = 0; i < 5; i++) { // Add a limit to prevent infinite loops
                try {
                  console.log(`Attempting to create release with tag ${tagName}`);
                  const { data } = await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: tagName,
                    name: releaseName,
                    body: releaseBody,
                    draft: false,
                    prerelease: false
                  });
                  
                  console.log(`Successfully created release with tag ${tagName}`);
                  core.setOutput('release_id', data.id);
                  core.exportVariable('APP_VERSION', version);
                  return data.id;

                } catch (error) {
                  if (error.status === 422 && error.response && error.response.data && error.response.data.errors.some(e => e.code === 'already_exists')) {
                    console.log(`Tag ${tagName} already exists. Incrementing patch version.`);
                    version = incrementPatchVersion(version);
                    tagName = `v${version}`;
                    releaseName = `JSR ${tagName}`;
                  } else {
                    console.error('Failed to create release:', error);
                    throw error;
                  }
                }
              }
              throw new Error('Failed to create a unique release tag after 5 attempts.');
            }

            return await createOrUpdateRelease();

  # Job to build Tauri app for multiple platforms
  build-tauri:
    name: Build Tauri App (${{ matrix.platform }})
    needs: create-release
    strategy:
      # Continue with other platforms if one fails
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Determine which version to use (dynamic or from tauri.conf.json)
      - name: Determine app version
        id: get-version
        shell: bash
        run: |
          # Включаем отладочный режим, если запрошен
          if [[ "${{ github.event.inputs.debug_enabled }}" == "true" ]]; then
            set -x
            echo "Debug mode enabled"
            # Выводим информацию о рабочей директории и файлах
            pwd
            ls -la
            ls -la ./JSR-Tauri || echo "JSR-Tauri directory not found"
            ls -la ./JSR-Tauri/jsr-tauri-app || echo "jsr-tauri-app directory not found"
          fi
          
          if [[ -n "$APP_VERSION" ]]; then
            echo "Using dynamically generated version: $APP_VERSION"
            echo "version=$APP_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Using original version from tauri.conf.json"
            echo "version=${{ needs.create-release.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      # Setup Node.js environment
      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: './JSR-Tauri/jsr-tauri-app/src/package-lock.json'
        continue-on-error: true

      # Setup Rust environment
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Install Linux-specific dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      # Install frontend dependencies
      - name: Install frontend dependencies
        shell: bash
        run: |
          # Verify directory exists
          if [ ! -d "./JSR-Tauri/jsr-tauri-app/src" ]; then
            echo "Error: Frontend directory not found"
            find ./JSR-Tauri -name "package.json" -type f
            exit 1
          fi
          npm ci
        working-directory: ./JSR-Tauri/jsr-tauri-app/src
        
      # Проверка структуры проекта перед сборкой
      - name: Check project structure
        shell: bash
        run: |
          echo "Checking project structure before build..."
          # Проверяем наличие директорий
          if [ ! -d "./JSR-Tauri/jsr-tauri-app/src" ]; then
            echo "Error: Project directory not found"
            ls -la ./JSR-Tauri || echo "JSR-Tauri directory not found"
            ls -la ./JSR-Tauri/jsr-tauri-app || echo "jsr-tauri-app directory not found"
            exit 1
          fi
          
          # Проверяем наличие файла конфигурации Tauri
          if [ ! -f "./JSR-Tauri/jsr-tauri-app/src/src-tauri/tauri.conf.json" ]; then
            echo "Warning: tauri.conf.json not found at expected path"
            FOUND_PATHS=$(find ./JSR-Tauri -name "tauri.conf.json" -type f)
            if [ -n "$FOUND_PATHS" ]; then
              echo "Found tauri.conf.json at:"
              echo "$FOUND_PATHS"
            fi
          else
            echo "Found tauri.conf.json at expected path"
          fi
          
          # Проверяем наличие package.json
          if [ ! -f "./JSR-Tauri/jsr-tauri-app/src/package.json" ]; then
            echo "Warning: package.json not found at expected path"
            FOUND_PATHS=$(find ./JSR-Tauri -name "package.json" -type f)
            if [ -n "$FOUND_PATHS" ]; then
              echo "Found package.json at:"
              echo "$FOUND_PATHS"
            fi
          else
            echo "Found package.json at expected path"
          fi

      # Build and release the Tauri application
      - name: Build and release Tauri application
        uses: tauri-apps/tauri-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './JSR-Tauri/jsr-tauri-app/src'
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: v${{ steps.get-version.outputs.version }}
          releaseName: 'JSR v${{ steps.get-version.outputs.version }}'
          includeDebug: false
          includeRelease: true
          includeUpdaterJson: true
          tauriScript: 'npm run tauri'

      # Fallback artifact upload if tauri-action fails
      - name: Upload artifacts manually if needed
        if: failure()
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ steps.get-version.outputs.version }}
          PLATFORM: ${{ matrix.platform }}
        with:
          script: |
            /**
             * Manual artifact upload script that runs if the tauri-action fails
             * This ensures artifacts are still uploaded to the release even if the main action fails
             */
            
            const fs = require('fs');
            const path = require('path');
            
            // Install globby package version 11.0.4 which supports CommonJS require
            console.log('Installing globby package...');
            await exec.getExecOutput('npm', ['install', '--save', 'globby@11.0.4']);
            const globby = require('globby');
            
            // Get environment variables
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            const platform = process.env.PLATFORM;
            
            console.log(`Manual upload for platform: ${platform}, version: ${version}, release ID: ${releaseId}`);
            
            // Define patterns based on platform
            let patterns = [];
            if (platform === 'windows-latest') {
              patterns = [
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/nsis/*.exe',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/msi/*.msi',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/*.exe',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.exe',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.msi'
              ];
              console.log('Looking for Windows artifacts...');
            } else if (platform === 'macos-latest') {
              patterns = [
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/dmg/*.dmg',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/macos/*.app',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.dmg'
              ];
              console.log('Looking for macOS artifacts...');
            } else if (platform === 'ubuntu-latest') {
              patterns = [
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/deb/*.deb',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/appimage/*.AppImage',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.deb',
                './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.AppImage'
              ];
              console.log('Looking for Linux artifacts...');
            }
            
            // Find and upload files
            console.log('Searching for build artifacts...');
            try {
              // Check if directories exist first
              const baseDir = './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release';
              if (!fs.existsSync(baseDir)) {
                console.log(`Base directory ${baseDir} does not exist. Checking parent directories...`);
                // List available directories to help debug
                const dirs = ['./JSR-Tauri', './JSR-Tauri/jsr-tauri-app', './JSR-Tauri/jsr-tauri-app/src'];
                for (const dir of dirs) {
                  console.log(`Checking if ${dir} exists: ${fs.existsSync(dir)}`);
                  if (fs.existsSync(dir)) {
                    console.log(`Contents of ${dir}:`);
                    console.log(fs.readdirSync(dir));
                  }
                }
              } else {
                console.log(`Base directory ${baseDir} exists. Contents:`);
                console.log(fs.readdirSync(baseDir));
                
                // Check bundle directory
                const bundleDir = `${baseDir}/bundle`;
                if (fs.existsSync(bundleDir)) {
                  console.log(`Bundle directory ${bundleDir} exists. Contents:`);
                  console.log(fs.readdirSync(bundleDir));
                }
              }
              
              const files = await globby(patterns);
              console.log(`Found ${files.length} files to upload`);
              
              if (files.length === 0) {
                // Try to find any build artifacts if the specific patterns didn't match
                console.log('No files found with specific patterns. Trying broader search...');
                const allFiles = await globby(['./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/**/*.{exe,msi,dmg,deb,AppImage}']);
                console.log(`Broader search found ${allFiles.length} files:`);
                allFiles.forEach(file => console.log(` - ${file}`));
              }
            
            // Upload each file to the GitHub release
            let successCount = 0;
            let errorCount = 0;
            
            if (files && files.length > 0) {
              for (const file of files) {
                const fileName = path.basename(file);
                console.log(`Uploading ${fileName}...`);
                
                try {
                  if (!fs.existsSync(file)) {
                    console.error(`❌ File does not exist: ${file}`);
                    errorCount++;
                    continue;
                  }
                  
                  const fileData = fs.readFileSync(file);
                  
                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: releaseId,
                    name: fileName,
                    data: fileData
                  });
                  
                  console.log(`✅ Successfully uploaded ${fileName}`);
                  successCount++;
                } catch (error) {
                  console.error(`❌ Error uploading ${fileName}:`, error);
                  errorCount++;
                }
              }
            } else {
              console.log('No files to upload. Checking for any build artifacts...');
              try {
                // Execute a shell command to find any build artifacts
                const { stdout } = await exec.getExecOutput('find', ['./JSR-Tauri', '-type', 'f', '-name', '*.exe', '-o', '-name', '*.msi', '-o', '-name', '*.dmg', '-o', '-name', '*.deb', '-o', '-name', '*.AppImage']);
                console.log('Find command results:');
                console.log(stdout);
              } catch (error) {
                console.error('Error executing find command:', error);
              }
            }
            } catch (error) {
              console.error('Error during artifact search:', error);
            }
            
            // Summary
            if (files && files.length > 0) {
              console.log(`📊 Upload summary: ${successCount} successful, ${errorCount} failed`);
            } else {
              console.log('⚠️ No artifacts found to upload.');
            }