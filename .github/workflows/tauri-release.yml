name: Tauri Release

on:
  push:
    branches: [ main ]
    paths:
      - 'JSR-Tauri/jsr-tauri-app/**'
      - '.github/workflows/tauri-release.yml'

# Add explicit permissions for the workflow
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      version: ${{ steps.app-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get app version
        id: app-version
        run: |
          VERSION=$(cat ./JSR-Tauri/jsr-tauri-app/src/src-tauri/tauri.conf.json | grep '"version"' | head -n 1 | awk -F '"' '{print $4}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "App version: $VERSION"

      - name: Get commit messages
        id: get-commits
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMIT_LOG=$(git log --pretty=format:"%s" $(git rev-list --max-parents=0 HEAD)..HEAD)
          else
            COMMIT_LOG=$(git log --pretty=format:"%s" $PREVIOUS_TAG..HEAD)
          fi
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            
            try {
              // Check if release already exists
              const tagName = `v${{ steps.app-version.outputs.version }}`;
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const existingRelease = releases.find(release => release.tag_name === tagName);
              
              if (existingRelease) {
                console.log(`Release with tag ${tagName} already exists. Creating a new tag with incremented version.`);
                
                // Parse version and increment it
                let version = '${{ steps.app-version.outputs.version }}';
                const versionParts = version.split('.');
                let patch = parseInt(versionParts[2] || '0');
                patch++;
                const newVersion = `${versionParts[0]}.${versionParts[1]}.${patch}`;
                const newTagName = `v${newVersion}`;
                
                console.log(`Creating new release with tag ${newTagName}`);
                
                // Create new release with incremented version
                const { data } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: newTagName,
                  name: `JSR ${newTagName}`,
                  body: `## Что нового в этом релизе:\n${{ env.COMMIT_LOG }}`,
                  draft: false,
                  prerelease: false
                });
                
                // Set the new version as an output for other jobs to use
                core.exportVariable('APP_VERSION', newVersion);
                return data.id;
              }
              
              // Create new release if it doesn't exist
              const { data } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `JSR ${tagName}`,
                body: `## Что нового в этом релизе:\n${{ env.COMMIT_LOG }}`,
                draft: false,
                prerelease: false
              });
              return data.id;
            } catch (error) {
              console.error('Error creating release:', error);
              
              // If we can't create a release, try to create one with incremented version
              try {
                let version = '${{ steps.app-version.outputs.version }}';
                const versionParts = version.split('.');
                let patch = parseInt(versionParts[2] || '0');
                patch++;
                const newVersion = `${versionParts[0]}.${versionParts[1]}.${patch}`;
                const newTagName = `v${newVersion}`;
                
                console.log(`Trying with incremented version: ${newTagName}`);
                
                const { data } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: newTagName,
                  name: `JSR ${newTagName}`,
                  body: `## Что нового в этом релизе:\n${{ env.COMMIT_LOG }}`,
                  draft: false,
                  prerelease: false
                });
                
                // Set the new version as an output for other jobs to use
                core.exportVariable('APP_VERSION', newVersion);
                return data.id;
              } catch (fallbackError) {
                console.error('Fallback error:', fallbackError);
                throw error;
              }
            }
            return data.id

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version to use
        id: get-version
        shell: bash
        run: |
          if [[ -n "$APP_VERSION" ]]; then
            echo "Using dynamically generated version: $APP_VERSION"
            echo "version=$APP_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Using original version from tauri.conf.json"
            echo "version=${{ needs.create-release.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          # Disable cache to avoid path resolution issues
          cache: 'npm'
          cache-dependency-path: './JSR-Tauri/jsr-tauri-app/src/package-lock.json'
        continue-on-error: true

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./JSR-Tauri/jsr-tauri-app/src

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.jsr_token }}
        with:
          projectPath: './JSR-Tauri/jsr-tauri-app/src'
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: v${{ steps.get-version.outputs.version }}
          releaseName: 'JSR v${{ steps.get-version.outputs.version }}'

      - name: Upload Windows artifacts manually if needed
        if: matrix.platform == 'windows-latest' && failure()
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ steps.get-version.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            // Install globby package first
            await exec.getExecOutput('npm', ['install', 'globby']);
            const { globby } = await import('globby');
            
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            
            const exeFiles = await globby([
              './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/nsis/*.exe',
              './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/msi/*.msi'
            ]);
            
            for (const file of exeFiles) {
              const fileName = path.basename(file);
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fileData
              });
            }

      - name: Upload macOS artifacts manually if needed
        if: matrix.platform == 'macos-latest' && failure()
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ steps.get-version.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            // Install globby package first
            await exec.getExecOutput('npm', ['install', 'globby']);
            const { globby } = await import('globby');
            
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            
            const dmgFiles = await globby(['./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/dmg/*.dmg']);
            
            for (const file of dmgFiles) {
              const fileName = path.basename(file);
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fileData
              });
            }

      - name: Upload Linux artifacts manually if needed
        if: matrix.platform == 'ubuntu-latest' && failure()
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
          VERSION: ${{ steps.get-version.outputs.version }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            // Install globby package first
            await exec.getExecOutput('npm', ['install', 'globby']);
            const { globby } = await import('globby');
            
            const releaseId = process.env.RELEASE_ID;
            const version = process.env.VERSION;
            
            const linuxFiles = await globby([
              './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/deb/*.deb',
              './JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/appimage/*.AppImage'
            ]);
            
            for (const file of linuxFiles) {
              const fileName = path.basename(file);
              console.log(`Uploading ${fileName}...`);
              
              const fileData = fs.readFileSync(file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: fileName,
                data: fileData
              });
            }