# Workflow for building Tauri app on pull requests
name: Tauri Build PR

# Trigger on pull requests to main branch that modify Tauri app files or this workflow
on:
  pull_request:
    branches: [ main ]
    paths:
      - 'JSR-Tauri/jsr-tauri-app/**'
      - '.github/workflows/tauri-build-pr.yml'
  # Добавляем возможность ручного запуска
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Включить отладочный режим'
        required: false
        default: false
        type: boolean

# Required permissions for the workflow
permissions:
  contents: write    # Needed for checkout and artifact handling
  pull-requests: write  # Needed for commenting on PRs
  issues: write      # Needed for issue management

jobs:
  build-tauri:
    name: Build Tauri App (${{ matrix.platform }})
    strategy:
      # Continue with other platforms if one fails
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Включаем отладочный режим, если запрошен
      - name: Enable debug mode if requested
        if: github.event.inputs.debug_enabled == 'true'
        shell: bash
        run: |
          set -x
          echo "Debug mode enabled"
          # Выводим информацию о рабочей директории и файлах
          pwd
          ls -la
          ls -la ./JSR-Tauri || echo "JSR-Tauri directory not found"
          ls -la ./JSR-Tauri/jsr-tauri-app || echo "jsr-tauri-app directory not found"
      
      # Setup Node.js environment
      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: './JSR-Tauri/jsr-tauri-app/src/package-lock.json'
        continue-on-error: true

      # Setup Rust environment
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Install Linux-specific dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          # Verify directory exists
          if [ ! -d "./JSR-Tauri/jsr-tauri-app/src" ]; then
            echo "Error: Frontend directory not found"
            find ./JSR-Tauri -name "package.json" -type f
            exit 1
          fi
          npm ci
        working-directory: ./JSR-Tauri/jsr-tauri-app/src

      # Проверка структуры проекта перед сборкой
      - name: Check project structure
        run: |
          echo "Checking project structure before build..."
          # Проверяем наличие директорий
          if [ ! -d "./JSR-Tauri/jsr-tauri-app/src" ]; then
            echo "Error: Project directory not found"
            ls -la ./JSR-Tauri || echo "JSR-Tauri directory not found"
            ls -la ./JSR-Tauri/jsr-tauri-app || echo "jsr-tauri-app directory not found"
            exit 1
          fi
          
          # Проверяем наличие файла конфигурации Tauri
          if [ ! -f "./JSR-Tauri/jsr-tauri-app/src/src-tauri/tauri.conf.json" ]; then
            echo "Warning: tauri.conf.json not found at expected path"
            FOUND_PATHS=$(find ./JSR-Tauri -name "tauri.conf.json" -type f)
            if [ -n "$FOUND_PATHS" ]; then
              echo "Found tauri.conf.json at:"
              echo "$FOUND_PATHS"
            fi
          else
            echo "Found tauri.conf.json at expected path"
          fi
          
          # Проверяем наличие package.json
          if [ ! -f "./JSR-Tauri/jsr-tauri-app/src/package.json" ]; then
            echo "Warning: package.json not found at expected path"
            FOUND_PATHS=$(find ./JSR-Tauri -name "package.json" -type f)
            if [ -n "$FOUND_PATHS" ]; then
              echo "Found package.json at:"
              echo "$FOUND_PATHS"
            fi
          else
            echo "Found package.json at expected path"
          fi
      
      # Build the Tauri application
      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './JSR-Tauri/jsr-tauri-app/src'
          includeDebug: false
          includeRelease: true
          tauriScript: 'npm run tauri'

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-artifacts-${{ matrix.platform }}
          path: |
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/msi/*.msi
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/nsis/*.exe
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/*.exe
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.exe
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.msi
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/dmg/*.dmg
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/macos/*.app
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.dmg
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/deb/*.deb
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/appimage/*.AppImage
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.deb
            ./JSR-Tauri/jsr-tauri-app/src/src-tauri/target/release/bundle/**/*.AppImage
          if-no-files-found: warn